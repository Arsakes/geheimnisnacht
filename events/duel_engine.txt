######################################################
# 
# @author Pietrko <p.l.stepnicki@gmail.com>
# @version 0.1.0
# @compatibility 2.1.6
# @modified_on 0.1.2
#
# Here is Warhammer mod custom duel engine
#
# DUEL MODEL
#
# attributes
# hit points:   how many attacks being can suffer
#           1-?
# attack:   overall rating of character's attack power
#           0-10
# defence:  overall rating of character's toughness
#           and defence skills
#           0-10
#
# All those attributes are determined when duel starts
# basing on traits, modfiers etc
#
#
# Duel is turn based, each duel turn consits of two
# duelers turns, the duel is started with 
# character with higher martial rank
#
#
# Events: 1.Trigerring event - just a template many of them
#         2.Reporting&Choice making
#         3.Init event(hidden)
#         4.Turn event(hidden)
# 
#
#
# 0-9:   Engine events
# 10-19: Triggerning events
# 20-x:  Reporting events
#
#
# TARGET LOCKING
# flags: opinion_battlefield_duel_target
# battlefield_fight = modificator for character after duel
#
######################################################

namespace = duelengine

# HIDDEN EVENTS FOR MECHANICS 
#
#
# for this event FORM = ROOT?



# FIXME check why it marks multiple targets
character_event = { # Battlefield Duel Start
    id = duelengine.0
    border = "GFX_event_normal_frame_war"
    picture = GFX_evt_battle
    
    is_triggered_only = yes
    
    trigger = {
        NOT = { has_character_modifier = battlefield_fight }
        #NOT = { culture_group = ? }
        # Avoid crossing targets
        OR = {
            AND = {
                liege = { war = yes }
                war = no
            }
            AND = {
                war = yes
                liege = { 
                    OR = {
                        war = no 
                        character = ROOT
                    }    
                }    
            }
        }
        OR = {
            AND = {
                is_ruler = yes
                war = yes
                any_playable_ruler = {
                    war_with = ROOT
                    OR = {
                        AND = {                        
                            in_battle = yes
                            at_location = ROOT
                            prisoner = no
                            is_alive = yes        
                            NOT = { character = ROOT }                        
                            #NOT = { culture_group = unoccupied_group } FIXME remember about this when we introduce ruins
                            NOT = { has_character_modifier = battlefield_fight }
                        }
                        any_realm_character = {                
                            in_battle = yes
                            at_location = ROOT
                            prisoner = no
                            is_alive = yes        
                            NOT = { character = ROOT }
                            NOT = { has_character_modifier = battlefield_fight }
                        }
                    }    
                }
            }    
            AND = {
                war = no
                liege = {
                    any_playable_ruler = {
                        war_with = PREV
                        OR = {
                            AND = {                        
                                in_battle = yes
                                at_location = ROOT
                                prisoner = no
                                is_alive = yes        
                                NOT = { character = ROOT }                        
                                NOT = { has_character_modifier = battlefield_fight }
                            }
                            any_realm_character = {                        
                                in_battle = yes
                                at_location = ROOT
                                prisoner = no
                                is_alive = yes        
                                NOT = { character = ROOT }
                                NOT = { has_character_modifier = battlefield_fight }
                            }
                        }    
                    }
                }
            }    
        }
    }
    
    weight_multiplier = {
        days = 1
        # greater chance for duel of warlike races
        modifier = {
            factor = 2
            OR = {
                culture_group = orc_group
                culture_group = ogre_group
                culture_group = lizardman_group
            }
        }
        modifier = {
            factor = 1.5
            OR = {
                culture_group = hung_group
                culture_group = amazon_group
                culture_group = kurgan_group
                culture_group = norscan_group
                culture_group = dwarf_group
                culture_group = dwarf_chaos_group
            }
        }
        modifier = {
            factor = 3
            trait = duelist
        }
        modifier = {
            factor = 3
            trait = brave
        }
        modifier = {
            factor = 3
            trait = wroth
        }
        modifier = {
            factor = 0.33
            trait = craven
        }
        modifier = {
            factor = 0.33
            trait = patient
        }
    }
    
    immediate = {
        add_character_modifier = {
            name = battlefield_fight
            duration = 10
        }
        # Target lock
        # case 1 - we have our own war
        if = {
            limit = { 
                war = yes
                liege = { 
                    OR = {
                        war = no 
                        character = ROOT
                    }    
                }
            }
            random_playable_ruler = {
                limit = {
                    war_with = ROOT
                    OR = {
                        AND = {                        
                            in_battle = yes
                            at_location = ROOT
                            prisoner = no
                            is_alive = yes        
                            NOT = { character = ROOT }                        
                            NOT = { has_character_modifier = battlefield_fight }
                        }
                        any_realm_character = {                        
                            in_battle = yes # FIXME in_command?
                            at_location = ROOT
                            prisoner = no
                            is_alive = yes        
                            NOT = { character = ROOT }
                            #NOT = { culture_group = unoccupied_group } FIXME remember about this when we introduce ruins
                            NOT = { has_character_modifier = battlefield_fight }
                        }
                    }
                }
                if = {
                    limit = {
                        in_battle = yes # marks first category of targets: playable rulers
                        at_location = ROOT
                        prisoner = no
                        is_alive = yes        
                        NOT = { character = ROOT }                        
                        NOT = { has_character_modifier = battlefield_fight }
                    }
                    opinion = { who = ROOT modifier = opinion_battle_duel_target }
                    reverse_opinion = { who = ROOT modifier = opinion_battle_duel_target }
                }
                if = {
                    limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target } } }
                    random_realm_character = {
                        limit = {
                            in_battle  = yes #FIXME in battle
                            at_location = ROOT
                            prisoner = no
                            is_alive = yes        
                            NOT = { character = ROOT }                        
                            NOT = { has_character_modifier = battlefield_fight }
                        }
                        opinion = { who = ROOT modifier = opinion_battle_duel_target }
                        reverse_opinion = { who = ROOT modifier = opinion_battle_duel_target }
                    }
                }    
            }
        }
        # Case 2 - we server in liege forces
        if = {
            limit = { 
                war = no
                liege = { war = yes }                
            }
            liege = {
                random_playable_ruler = {
                    limit = {
                        war_with = PREV
                        OR = {
                            AND = {                        
                                in_battle = yes #FIXME
                                at_location = ROOT
                                prisoner = no
                                is_alive = yes        
                                NOT = { character = ROOT }                        
                                NOT = { has_character_modifier = battlefield_fight }
                            }
                            any_realm_character = {                        
                                in_battle = yes
                                at_location = ROOT
                                prisoner = no
                                is_alive = yes        
                                NOT = { character = ROOT }
                                NOT = { has_character_modifier = battlefield_fight }
                            }
                        }
                    }
                    if = {
                        limit = {
                            in_battle = yes
                            at_location = ROOT
                            prisoner = no
                            is_alive = yes        
                            NOT = { character = ROOT }                        
                            NOT = { has_character_modifier = battlefield_fight }
                        }
                        opinion = { who = ROOT modifier = opinion_battle_duel_target }
                        reverse_opinion = { who = ROOT modifier = opinion_battle_duel_target }
                    }
                    if = {
                        limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target } } }
                        random_realm_character = {
                            limit = {
                                in_battle = yes
                                at_location = ROOT
                                prisoner = no
                                is_alive = yes        
                                NOT = { character = ROOT }                        
                                NOT = { has_character_modifier = battlefield_fight }
                            }
                            opinion = { who = ROOT modifier = opinion_battle_duel_target }
                            reverse_opinion = { who = ROOT modifier = opinion_battle_duel_target }
                        }
                    }    
                }
            }
        }
    }
    # OPTIONS
    option = {
        # we assume that there is only one person marked with opinion_battle_duel_target
        # which is wrong
        name = "EVTOPT_DUELENGINE_1A"
        if = {
            limit = { 
                war = yes
                liege = { 
                    OR = {
                        war = no 
                        character = ROOT
                    }    
                }                
            }
            random_playable_ruler = {
                limit = { 
                    war_with = ROOT
                    OR = {
                        has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target }    
                        any_realm_character = { has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target } }
                    }    
                }
                if = {
                    limit = { has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target } }
                    hidden_tooltip = { character_event = { id = duelengine.1 } }
                }
                random_realm_character = {
                    limit = { 
                        has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target }
                        NOT = { character = PREV } # random_realm_character can be the ruler itself
                    } 
                    hidden_tooltip = { character_event = { id = duelengine.1 } }
                }
            }
        }
        if = {
            limit = { 
                war = no
                liege = { war = yes }                
            }
            liege = {
                random_playable_ruler = {
                    limit = { 
                        war_with = PREV
                        OR = {
                            has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target }    
                            any_realm_character = { has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target } }
                        }    
                    }
                    if = {
                        limit = { has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target } }
                        hidden_tooltip = { character_event = { id = duelengine.1  } }
                    }
                    random_realm_character = {
                        limit = { 
                            has_opinion_modifier = { who = ROOT modifier = opinion_battle_duel_target }
                            NOT = { character = PREV } # random_realm_character can be the ruler itself
                        }
                        hidden_tooltip = { character_event = { id = duelengine.1  } }
                    }
                }
            }
        }
    }
}
#
# duelengine.1 Defender(target) fight or run?
#
character_event = {
    id = duelengine.1
    desc = "EVTDESC_DUELENGINE_1"
    picture = "GFX_evt_duel0"
    border = "GFX_event_normal_frame_war"
    is_triggered_only = yes
    
    immediate = {
        add_character_modifier = {
            name = battlefield_fight
            duration = 10
        }
        # Remove targeting information (just from the fighter)
        remove_opinion = { who = FROM modifier = opinion_battle_duel_target }
        reverse_remove_opinion = { who = FROM modifier = opinion_battle_duel_target }
    }
    
    option = {
        name = "EVTOPT_DUELENGINE_1A"
        FROM = { character_event = { id = duelengine.2 tooltip = "DUELENGINE_TOOLTIP_1A" } }
        ai_chance = {
            factor = 100
            #modifier = {
            #    factor = 2
            #    trait = poor_warrior
            #}
            #modifier = {
            #    factor = 3
            #    trait = trained_warrior
            #}
            #modifier = {
            #    factor = 6
            #    trait = skilled_warrior
            #}
            #modifier = {
            #    factor = 8
            #    trait = master_warrior
            #}
            modifier = {
                factor = 6
                trait = duelist
            }
            modifier = {
                factor = 6
                trait = brave
            }
            modifier = {
                factor = 3
                trait = proud
            }
            modifier = {
                factor = 3
                trait = wroth
            }
            modifier = {
                factor = 3
                trait = strong
            }
            modifier = {
                factor = 3
                trait = tall
            }
        }
    }
    
    option = {
        name = "EVTOPT_DUELENGINE_1B"
        hidden_tooltip = { FROM = { character_event = { id = duelengine.5 } } }        
        remove_character_modifier = battlefield_fight
        if = {
            limit = { NOT = { trait = craven } }
            random = {
                chance = 25
                add_trait = craven
                hidden_tooltip = {
                    character_event ={
                        id = 38257 #Notify FIXME
                    }
                }
            }    
        }
        morale = -0.1
        ai_chance = {
            factor = 1 #FIXME
            #modifier = {
            #    factor = 2
            #    FROM = { trait = poor_warrior }
            #}
            #modifier = {
            #    factor = 3
            #    FROM = { trait = trained_warrior }
            #}
            #modifier = {
            #    factor = 4
            #    FROM = { trait = skilled_warrior }
            #}
            #modifier = {
            #    factor = 5
            #    FROM = { trait = master_warrior }
            #}
            modifier = {
                factor = 2
                FROM = { trait = strong }
            }
            modifier = {
                factor = 2
                FROM = { trait = tall }
            }
            modifier = {
                factor = 2
                trait = craven
            }
            modifier = {
                factor = 2
                trait = paranoid
            }
            modifier = {
                factor = 2
                trait = weak
            }
            modifier = {
                factor = 2
                trait = dwarf
            }
            modifier = {
                factor = 2
                trait = hunchback
            }
            modifier = {
                factor = 2
                trait = leper
            }
            modifier = {
                factor = 2
                trait = wounded
            }
            modifier = {
                factor = 4
                trait = maimed
            }
        }
    }
}
# 
# Attacker if attack or no triggered FROM = defender (this trigger duel or no)
# ROOT = attacker
# FROM = defender
character_event = {
    id = duelengine.2
    desc = "EVTDESC_DUELENGINE_1" #the same locals
    picture = "GFX_evt_duel0"
    border = "GFX_event_normal_frame_war"
    
    is_triggered_only = yes
    
    immediate = {
       # set stats
       FROM = { character_event = { id = duelengine.3 }}
       character_event = { id = duelengine.3 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_1A"
        # Begin duel
        hidden_tooltip = {
           # FIXME random person starts the fight
           # Defender starts the fight (in testing case ai)
           FROM = { character_event = { id = duelengine.4 days = 1 } }    
        }
        ai_chance = {
            factor = 100
            modifier = {
                factor = 2
                trait = poor_warrior
            }
            modifier = {
                factor = 3
                trait = trained_warrior
            }
            modifier = {
                factor = 4
                trait = skilled_warrior
            }
            modifier = {
                factor = 5
                trait = master_warrior
            }
            modifier = {
                factor = 2
                trait = brave
            }
            modifier = {
                factor = 2
                trait = proud
            }
            modifier = {
                factor = 1.5
                trait = wroth
            }
            modifier = {
                factor = 1.5
                trait = strong
            }
            modifier = {
                factor = 1.5
                trait = tall
            }
        }
    }
    # RUN from enemy!
    option = {
        name = "EVTOPT_DUELENGINE_1B"
        hidden_tooltip = { FROM = { character_event = { id = duelengine.5 } } }
        remove_character_modifier = battlefield_fight
        if = {
            limit = { NOT = { trait = craven } }
            random = {
                chance = 25
                add_trait = craven
                hidden_tooltip = {
                    character_event ={
                        id = 38257 #Notify
                    }
                }
            }
        }
        morale = -0.1
        ai_chance = {
            factor = 100
            modifier = {
                factor = 2
                FROM = { trait = poor_warrior }
            }
            modifier = {
                factor = 3
                FROM = { trait = trained_warrior }
            }
            modifier = {
                factor = 4
                FROM = { trait = skilled_warrior }
            }
            modifier = {
                factor = 5
                FROM = { trait = master_warrior }
            }
            modifier = {
                factor = 2
                FROM = { trait = strong }
            }
            modifier = {
                factor = 2
                FROM = { trait = tall }
            }
            modifier = {
                factor = 2
                trait = craven
            }
            modifier = {
                factor = 2
                trait = paranoid
            }
            modifier = {
                factor = 2
                trait = weak
            }
            modifier = {
                factor = 2
                trait = dwarf
            }
            modifier = {
                factor = 2
                trait = hunchback
            }
            modifier = {
                factor = 2
                trait = leper
            }
            modifier = {
                factor = 2
                trait = wounded
            }
            modifier = {
                factor = 4
                trait = maimed
            }
        }
    }
}
###########################################################################
#
# DUEL INIT:  Set character attributes basing on traits
#
###########################################################################
character_event = {
   id = duelengine.3
   hide_window = yes 
   is_triggered_only = yes

   immediate = {
       # Determine attributes 
       # first we determine basic values for each race
       # then modify it according to traits etc
       #
       # Goblinoids and halflings
       if = { 
           limit = { 
               OR = {
                   trait = creature_goblin
                   trait = creature_snotling
                   trait = creature_halfling
                   trait = creature_skink
               }
           } 
           set_variable = { which = "duel_max_hp" value = 5 }
           set_variable = { which = "duel_att" value = 3 }
           set_variable = { which = "duel_def" value = 3 }
       }
       # Man sized creatures
       if = { 
           limit = { 
               OR = {
                   trait = creature_human
                   trait = creature_skaven
               }
           } 
           set_variable = { which = "duel_max_hp" value = 7 }
           set_variable = { which = "duel_att" value = 3 }
           set_variable = { which = "duel_def" value = 4 }
       }
       # elves (they seem to be weaker however they gain martial bonus
       # so its not true at all
       if = { limit = { trait = creature_elf } 
           set_variable = { which = "duel_max_hp" value = 6 }
           set_variable = { which = "duel_att" value = 4 }
           set_variable = { which = "duel_def" value = 3 }
       }
       # dwarves
       if = { 
           limit = { 
               OR = {
                   trait = creature_dwarf
                   trait = creature_chaos_dwarf
               }
           } 
           set_variable = { which = "duel_max_hp" value = 8 }
           set_variable = { which = "duel_att" value = 3 }
           set_variable = { which = "duel_def" value = 4 }
       }
       # orcs
       if = { limit = { trait = creature_orc } 
           set_variable = { which = "duel_max_hp" value =  8 }
           set_variable = { which = "duel_att" value = 4 }
           set_variable = { which = "duel_def" value = 4 }
       }
       # ogres are veryy big but slow witted
       if = { limit = { trait = creature_ogre } 
           set_variable = { which = "duel_max_hp" value = 10 }
           set_variable = { which = "duel_att" value = 5 }
           set_variable = { which = "duel_def" value = 4 }
       }
       # Hit point bonus basing on hp
       if = {
           limit = { NOT = { health = 2.5 } }
           change_variable = { which = "duel_max_hp" value = -1 }
       }
       if = {
           limit = { NOT = { health = 3.5 } }
           change_variable = { which = "duel_max_hp" value = -1 }
       }
       if = {
           limit = { health = 4.5 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       if = {
           limit = { health = 5.5 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       if = {
           limit = { health = 6.5 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       # Attack, defence, hp bonus basing on martial skill
       #
       # bonus for all ranges form 0-4
       if = { 
           limit = { martial = 5 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       if = { 
           limit = { martial = 7 }
           change_variable = { which = "duel_att" value = 1 }
       }
       if = { 
           limit = { martial = 9 }
           change_variable = { which = "duel_def" value = 1 }
       }
       if = { 
           limit = { martial = 11 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       if = { 
           limit = { martial = 13 }
           change_variable = { which = "duel_att" value = 1 }
       }
       if = { 
           limit = { martial = 15 }
           change_variable = { which = "duel_def" value = 1 }
       }
       if = { 
           limit = { martial = 17 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       if = { 
           limit = { martial = 19 }
           change_variable = { which = "duel_att" value = 1 }
       }
       if = { 
           limit = { martial = 21 }
           change_variable = { which = "duel_def" value = 1 }
       }
       if = { 
           limit = { martial = 23 }
           change_variable = { which = "duel_max_hp" value = 1 }
       }
       if = { 
           limit = { martial = 25 }
           change_variable = { which = "duel_att" value = 1 }
       }
       if = { 
           limit = { martial = 27 }
           change_variable = { which = "duel_def" value = 1 }
       }
       # setting starting hit points 
       set_variable = { which = "duel_hp" which = "duel_max_hp" }

       # Ok now here should be traits bonus but i left them for now
       if = { 
           limit = { trait = wounded  }
           change_variable = { which = "duel_def" value = -1 }
           change_variable = { which = "duel_att" value = -1 }
           set_variable = { which = "duel_hp" value = 3 }
       }
       if = { 
           limit = { trait = maimed  }
           change_variable = { which = "duel_def" value = -2 }
           change_variable = { which = "duel_att" value = -2 }
           set_variable = { which = "duel_hp" value = 2 }
       }
       
      
       ################## MAGIC ################################
       # read willpower and set magic points
       character_event = { id = "dicethrow.0" } 
       set_variable = { which =  "magic_points" which = "SW" }
       set_variable = { which = "SW" value = 0}
   }    
}
# Round event
# 
# each rund the damage is done to opponent
# according to formula: 
#
# CHARACTER STATS
# 
# duel_dmg - dmg taken form enemy this round 
# duel_att - attack 
# duel_def - defense
# duel_hp - actual hit points
# duel_max_hp - maximal hit points
# duel_att_mod - temporary attack modifier
# duel_def_mod - temporary defence modifier 
# duel_magic_att - used in place of duel_att if not zero
#
# magic_points - this is from other system, however is also used in duels
# not in a explicit way though
#
# each round it deals "duel_dmg" (variable is set on enemy)
# dmg = (k6 -2) + att(attacker) - def(defender) + att_mod(attacker) - def_mod(defender)
#
#
# At first rund:
#
# FROMFROM = attacker
# FROM = defender(victim)
# ROOT = attacker
character_event = {
    id = duelengine.4
    desc = "EVTDESC_DUELENGINE_4"
    picture = "GFX_evt_duel0"
    border = "GFX_event_normal_frame_war"
    is_triggered_only = yes
    
    immediate = {
        # clear flags that mark character's choose of type of move
        clr_character_flag = duel_move_combat
        clr_character_flag = duel_move_magic_spell
        clr_character_flag = duel_move_magic_other
        
        # read all modifiers (writes duel_att_mod, duel_def_mod) variables
        character_event = { id = duelengine.6 }

        # APPLY: attack modifier in case of modifed attack that is non-magical
        if = {
            limit = { is_variable_equal = { which = "duel_magic_att" value = 0 } }
            change_variable = { which = "duel_att" which = "duel_att_mod" }
        }
         
        # set basic damage
        FROM = { set_variable = { which = "duel_dmg" value = 0 } }
       
        # MAGIC DAMAGE
        #
        # in this case we swap duel_att wiht duel_magic_att  
        # using temporary variable duel_temp
        if = {
             limit = { NOT = { is_variable_equal = { which = "duel_magic_att" value = 0 } } }
             set_variable = { which = "duel_temp" which = "duel_att" }
             set_variable = { which = "duel_att" which = "duel_magic_att" }
        }
        
        # dmg from attack calculation (FROM is victim)
        if = { 
            limit = { check_variable = { which = "duel_att" value =  1 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  2 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  3 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  4 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  5 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  6 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  7 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  8 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value =  9 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 10 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 11 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 11 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 12 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 13 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 14 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        if = { 
            limit = { check_variable = { which = "duel_att" value = 15 } }   
            FROM = { change_variable = { which = "duel_dmg" value =  1 }}
        }
        # CLEAR MAGIC DAMAGE SWAP IN CASE OF USING SPELLS
        if = {
             limit = { NOT = { is_variable_equal = { which = "duel_magic_att" value = 0 } } }
             set_variable = { which = "duel_att" which = "duel_temp" }
             set_variable = { which = "duel_magic_att" value = 0 }
             set_variable = { which = "duel_temp" value = 0 }
        }

        # clear the bonus for next round (in case we have used that bonus) 
        if = {
            limit = { is_variable_equal = { which = "duel_magic_att" value = 0 } }
            subtract_variable = { which = "duel_att" which = "duel_att_mod" }
        }
 
        # determine random part of dmg
        FROM = {
            random_list = {
                16 = { FROM = { change_variable = { which = "duel_dmg" value = -1 } }}
                17 = { FROM = { change_variable = { which = "duel_dmg" value =  0 } }}
                17 = { FROM = { change_variable = { which = "duel_dmg" value =  1 } }}
                17 = { FROM = { change_variable = { which = "duel_dmg" value =  2 } }}
                17 = { FROM = { change_variable = { which = "duel_dmg" value =  3 } }}
                16 = { FROM = { change_variable = { which = "duel_dmg" value =  4 } }}
            }
        }
 
        #
        # now we have properly defined duel_dmg for defender time 
        # to take into account his defence capabilities
        #

        # APPLY: defence modifier 
        FROM = { subtract_variable = { which = "duel_dmg" which = "duel_def_mod" }}

        # APPLY: def of defender 
        FROM = { subtract_variable = { which = "duel_dmg" which = "duel_def" } }
        
        # Ok now duel_dmg has proper value which we should substract from health
        #
        # 
	# thing that prevents infinite duels (thanks erik) setting dmg to 1 if less than 0
        # (50%chance)
        if = {
            limit = { 
                NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
                random = 50
            }
            FROM = { set_variable = { which = "duel_dmg" value =  1 }} 
        }
        # applying damge
        FROM = { subtract_variable = { which = "duel_hp" which = "duel_dmg" } }
        
        # clear some ONE ROUND effects 
        clr_character_flag = duel_effect_defend
        clr_character_flag = duel_effect_attack
        clr_character_flag = duel_effect_counterspell

    }
 
    
    #############################################################################
    #
    # Here is decided round outcome, also the player decides what 
    # kind of move (regular combat, prepare spell, control the winds, change lore)
    # for each kind of round outcome there are 4 options 
    # therefore no more 4 * 4 options alotgether
    #
    # There are 4 (+1 death case) big mutally exclusive big cases  - in each case 
    # player is able to do one 
    #
    ############################################################################
    #
    # CASE 0 - END OF COMBAT
    option = {
        name = "EVTOPT_DUELENGINE_4E"
        # ONLY ONE IF CASE SHOULD FIRE
        # Events in case of death
        trigger = { 
            # 1 or less hp points - death
            NOT = { check_variable = { which = "duel_hp" value = 1 }}
        }
        # Erik: here is decided what happens to loser
        hidden_tooltip = {
        random_list = {
            70 = { character_event = { id = duelengine.24 } } # death
            30 = { character_event = { id = duelengine.26 } } # wounded but managed to run away
        }}
        ai_chance = { factor = 1 }
    }
    # CASE 1: BLOODY DRAW
    # subcase 1
    option = {
        name = "EVTOPT_DUELENGINE_4A"
        # Now when dmg is done there is time to send report events
        #
        # Both people hit themselves
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            FROM = { check_variable = { which = "duel_dmg" value = 1 }}
            check_variable = { which = "duel_dmg" value = 1 }
        }
        character_event = { id = duelengine.20 }
        set_character_flag = duel_move_combat
        ai_chance = { factor = 1 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_4B"
        # Now when dmg is done there is time to send report events
        #
        # Both people hit themselves
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            FROM = { check_variable = { which = "duel_dmg" value = 1 }}
            check_variable = { which = "duel_dmg" value = 1 }
        }
        character_event = { id = duelengine.20 }
        set_character_flag = duel_move_magic_spell
        ai_chance = { factor = 1 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_4C"
        # Now when dmg is done there is time to send report events
        #
        # Both people hit themselves
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            FROM = { check_variable = { which = "duel_dmg" value = 1 }}
            check_variable = { which = "duel_dmg" value = 1 }
        }
        character_event = { id = duelengine.20 }
        set_character_flag = duel_move_magic_other
        ai_chance = { factor = 1 }
    }
    ###################################################################
    #
    # CASE 2: VICTORY
    #
    option = {
        name = "EVTOPT_DUELENGINE_4A"
        # You hit your opponent
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            FROM = { check_variable = { which = "duel_dmg" value = 1 }}
            NOT = { check_variable = { which = "duel_dmg" value = 1 }}
        }
        set_character_flag = duel_move_combat
        character_event = { id = duelengine.21 } 
    }
    option = {
        name = "EVTOPT_DUELENGINE_4B"
        # You hit your opponent
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            FROM = { check_variable = { which = "duel_dmg" value = 1 }}
            NOT = { check_variable = { which = "duel_dmg" value = 1 }}
        }
        set_character_flag = duel_move_magic_spell
        character_event = { id = duelengine.21 } 
    }
    option = {
        name = "EVTOPT_DUELENGINE_4C"
        # You hit your opponent
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            FROM = { check_variable = { which = "duel_dmg" value = 1 }}
            NOT = { check_variable = { which = "duel_dmg" value = 1 }}
        }
        set_character_flag = duel_move_magic_other
        character_event = { id = duelengine.21 } 
    }
    #################################################################
    #
    # CASE 3: FAILURE
    #
    option = {   
        name = "EVTOPT_DUELENGINE_4A"
        # Your opponent hits you   
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
            check_variable = { which = "duel_dmg" value = 1 }
        }
        character_event = { id = duelengine.22 }
        set_character_flag = duel_move_combat
        ai_chance = { factor = 1 }
    }   
    option = {   
        name = "EVTOPT_DUELENGINE_4B"
        # Your opponent hits you   
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
            check_variable = { which = "duel_dmg" value = 1 }
        }
        character_event = { id = duelengine.22 }
        set_character_flag = duel_move_magic_spell
        ai_chance = { factor = 1 }
    }   
    option = {   
        name = "EVTOPT_DUELENGINE_4C"
        # Your opponent hits you   
        trigger = { 
            check_variable = { which = "duel_hp" value = 1 }
            NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
            check_variable = { which = "duel_dmg" value = 1 }
        }
        character_event = { id = duelengine.22 } 
        set_character_flag = duel_move_magic_other
        ai_chance = { factor = 1 }
    }   
    ###################################################################
    # 
    # CASE 4: WHITE DRAW
    #
    option = {
        name = "EVTOPT_DUELENGINE_4A"
        # Nobody hits
        trigger = {
            check_variable = { which = "duel_hp" value = 1 }
            NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
            NOT = { check_variable = { which = "duel_dmg" value = 1 }}
        }
        character_event = { id = duelengine.23 }
        set_character_flag = duel_move_combat
        ai_chance = { factor = 1 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_4B"
        # Nobody hits
        trigger = {
            check_variable = { which = "duel_hp" value = 1 }
            NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
            NOT = { check_variable = { which = "duel_dmg" value = 1 }}
        }
        character_event = { id = duelengine.23 }
        set_character_flag = duel_move_magic_spell
        ai_chance = { factor = 1 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_4C"
        # channeling, counterspell
        trigger = {
            check_variable = { which = "duel_hp" value = 1 }
            NOT = { FROM = { check_variable = { which = "duel_dmg" value = 1 }}}
            NOT = { check_variable = { which = "duel_dmg" value = 1 }}
        }
        character_event = { id = duelengine.23 }
        ai_chance = { factor = 1 }
        set_character_flag = duel_move_magic_other

    }
    # END OF THIS FUCKING BIG EVENT
}
#
# Run report 
character_event = {
    id = duelengine.5
    desc = "EVTDESC_DUELENGINE_5"
    picture = GFX_evt_battle
    border = "GFX_event_normal_frame_war"
    is_triggered_only = yes
    
    option = {
        name = "EVTOPT_DUELENGINE_5A"
        remove_character_modifier = battlefield_fight
        morale = 0.1
        # trigger clearing event
        hidden_tooltip = {
            character_event = { id = duelengine.9 }
            FROM = { character_event = { id = duelengine.9 } }
        }
    }
}
#########################################################
#
# Modifer setting event: duelengine.6
#
# This even handles all modifiers that apply to character
# stats
#
#########################################################
#
# FROM = ROOT = attacker
# FROMFROM = victim/defender
#
character_event = {
    id = duelengine.6
    is_triggered_only = yes
    hide_window = yes
    
    immediate = {

        # clear bonuses 
        set_variable = { which = "duel_att_mod" value = 0 }
        set_variable = { which = "duel_def_mod" value = 0 }
       
        # stance bonus
        if = { 
            limit = { has_character_flag = duel_effect_attack }   
            change_variable = { which = "duel_att_mod" value =  1 }
            change_variable = { which = "duel_def_mod" value = -1 }
        }
        if = { 
            limit = { has_character_flag = duel_effect_defend }   
            change_variable = { which = "duel_att_mod" value = -1 }
            change_variable = { which = "duel_def_mod" value = 1 }
        }
 
        # magic bonuses
        # counterspell in case of non-zero magic dmg
        if = {
            limit = { 
                has_character_flag = duel_effect_counterspell 
                # check enemy
                FROMFROM = { NOT = { is_variable_equal = { which = "duel_magic_att" value = 0 }}}
             }
            
            change_variable = { which = "duel_def_mod" value = 3 }
            # TODO apply lvl dependent bonus
        }
        # hysh effect: flare
        if = { 
            limit = { has_character_flag = duel_effect_flare }
            change_variable = { which = "duel_att_mod" value = -1 }
            change_variable = { which = "duel_def_mod" value = -1 }
        }
        # hysh effect: radiant weapon
        if = { 
            limit = { 
                has_character_flag = duel_effect_radiant_weapon
                FROMFROM = { culture_group = daemon_group } 
            } 
            change_variable = { which = "duel_att_mod" value = 2 }
        }
        # body of light
        if = { 
            limit = { 
                has_character_flag = duel_effect_body_of_light
            } 
            change_variable = { which = "duel_def_mod" value = 2 }
        }

    }
}
# CLEAR ALL EVENT
character_event = {
    id = duelengine.9
    is_triggered_only = yes
    hide_window = yes
    
    immediate = {
        # clear all duel stats
        set_variable = { which = "duel_att_mod" value = 0 }
        set_variable = { which = "duel_def_mod" value = 0 }
        set_variable = { which = "duel_att" value = 0 }
        set_variable = { which = "duel_def" value = 0 }
        set_variable = { which = "duel_dmg" value = 0 }
        set_variable = { which = "duel_hp" value = 0 }
    }
}

# Deciding who is first is done in event triggering the duel
# This is the event triggered by some battle events etc
#
# TODO it should be right this maybe?
####################################################
#
# VISIBLE EVENTS FOR REPORTING THE DUEL 
# AND CHOOSING OPTIONS
#
####################################################
#
# TEMPLATE
#
##So my understanding is that we will have several of these events each with their own unique descriptions?
##So that the reporting event isn't the same each time
##Could they be further broken down so you'll get unique report based on whether you or your opponent is a mage?
##Seems like this could make for lots of fun description writing as there are really only 6 outcomes right now
##     -Erik
#
# Pietrko(Arsakes): yes we could make mage dependnet outcomes too
#
#
#
# id = 20-x
#
# Each reporting event is also event used for choosing the particular move from 
# the move category defined one event before
# For all report events all options are THE SAME
#
# Round draw
character_event = { 
    id = duelengine.20
    desc = "EVTDESC_DUELENGINE_20"
    picture = "GFX_evt_duel1"
    border = GFX_event_normal_frame_war
    is_triggered_only = yes
  
    # CASE 1 MEELE COMBAT
    option = {
        name = "EVTOPT_DUELENGINE_20A"
        trigger = { has_character_flag = duel_move_combat }

        set_character_flag = duel_effect_defend

        FROMFROM = { character_event = { id = duelengine.4 }}
        # low hp - higher chances to defend
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                NOT = { check_variable = { which = "duel_hp" value = 3 } }
            }
            modifier = {
                factor = 0.5
                check_variable = { which = "duel_hp" value = 5 }
            }
        }
    }
    # attack stance
    option = {
        name = "EVTOPT_DUELENGINE_20B"
        trigger = { has_character_flag = duel_move_combat }
        
        set_character_flag = duel_effect_attack

        FROMFROM = { character_event = { id = duelengine.4 }}
        # high hp - higher chances to attack
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                check_variable = { which = "duel_hp" value = 5 }
            } 
        }
    }
    # normal stance
    option = {
        name = "EVTOPT_DUELENGINE_20C"
        trigger = { has_character_flag = duel_move_combat }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 2 CASTING SPELL
    option = {
        name = "EVTOPT_DUELENGINE_20D"
        trigger = { has_character_flag = duel_move_magic_spell }

        # offensive spell dispatcher
        character_event = { id = magicengine.6 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20E"
        trigger = { has_character_flag = duel_move_magic_spell }
        
        # defensive spell dispatcher
        character_event = { id = magicengine.7 }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20F"
        trigger = { has_character_flag = duel_move_magic_spell }
 
        # buff spell dispatcher
        character_event = { id = magicengine.8 }
     
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
     option = {
        name = "EVTOPT_DUELENGINE_20G"
        trigger = { has_character_flag = duel_move_magic_spell }
       
        # special spell dispatcher
        character_event = { id = magicengine.9 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 3 MAGIC ACTION
    option = {
        name = "EVTOPT_DUELENGINE_20H"
        trigger = { has_character_flag = duel_move_magic_other }

        # channeling event
        character_event =  { id = magicengine.0 }
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20I"
        trigger = { has_character_flag = duel_move_magic_other }

        # counterspell flag
        set_character_flag = duel_effect_counterspell
        # magic points penalty
        change_variable = { which = "magic_points" value = -2 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
}
# Round your win
character_event = { 
    id = duelengine.21
    desc = ""
    picture = "GFX_evt_duel3"
    border = GFX_event_normal_frame_war
    is_triggered_only = yes

    # CASE 1 MEELE COMBAT
    option = {
        name = "EVTOPT_DUELENGINE_20A"
        trigger = { has_character_flag = duel_move_combat }

        set_character_flag = duel_effect_defend

        FROMFROM = { character_event = { id = duelengine.4 }}
        # low hp - higher chances to defend
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                NOT = { check_variable = { which = "duel_hp" value = 3 } }
            }
            modifier = {
                factor = 0.5
                check_variable = { which = "duel_hp" value = 5 }
            }
        }
    }
    # attack stance
    option = {
        name = "EVTOPT_DUELENGINE_20B"
        trigger = { has_character_flag = duel_move_combat }
        
        set_character_flag = duel_effect_attack

        FROMFROM = { character_event = { id = duelengine.4 }}
        # high hp - higher chances to attack
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                check_variable = { which = "duel_hp" value = 5 }
            } 
        }
    }
    # normal stance
    option = {
        name = "EVTOPT_DUELENGINE_20C"
        trigger = { has_character_flag = duel_move_combat }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 2 CASTING SPELL
    option = {
        name = "EVTOPT_DUELENGINE_20D"
        trigger = { has_character_flag = duel_move_magic_spell }

        # offensive spell dispatcher
        character_event = { id = magicengine.6 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20E"
        trigger = { has_character_flag = duel_move_magic_spell }
        
        # defensive spell dispatcher
        character_event = { id = magicengine.7 }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20F"
        trigger = { has_character_flag = duel_move_magic_spell }
 
        # buff spell dispatcher
        character_event = { id = magicengine.8 }
     
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
     option = {
        name = "EVTOPT_DUELENGINE_20G"
        trigger = { has_character_flag = duel_move_magic_spell }
       
        # special spell dispatcher
        character_event = { id = magicengine.9 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 3 MAGIC ACTION
    option = {
        name = "EVTOPT_DUELENGINE_20H"
        trigger = { has_character_flag = duel_move_magic_other }

        # channeling event
        character_event =  { id = magicengine.0 }
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20I"
        trigger = { has_character_flag = duel_move_magic_other }

        # counterspell flag
        set_character_flag = duel_effect_counterspell
        # magic points penalty
        change_variable = { which = "magic_points" value = -2 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }

}
# Round lost
character_event = { 
    id = duelengine.22
    desc = "EVTDESC_DUELENGINE_22"
    is_triggered_only = yes
    picture = "GFX_evt_duel4"
    border = GFX_event_normal_frame_war
    
    # CASE 1 MEELE COMBAT
    option = {
        name = "EVTOPT_DUELENGINE_20A"
        trigger = { has_character_flag = duel_move_combat }

        set_character_flag = duel_effect_defend

        FROMFROM = { character_event = { id = duelengine.4 }}
        # low hp - higher chances to defend
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                NOT = { check_variable = { which = "duel_hp" value = 3 } }
            }
            modifier = {
                factor = 0.5
                check_variable = { which = "duel_hp" value = 5 }
            }
        }
    }
    # attack stance
    option = {
        name = "EVTOPT_DUELENGINE_20B"
        trigger = { has_character_flag = duel_move_combat }
        
        set_character_flag = duel_effect_attack

        FROMFROM = { character_event = { id = duelengine.4 }}
        # high hp - higher chances to attack
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                check_variable = { which = "duel_hp" value = 5 }
            } 
        }
    }
    # normal stance
    option = {
        name = "EVTOPT_DUELENGINE_20C"
        trigger = { has_character_flag = duel_move_combat }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 2 CASTING SPELL
    option = {
        name = "EVTOPT_DUELENGINE_20D"
        trigger = { has_character_flag = duel_move_magic_spell }

        # offensive spell dispatcher
        character_event = { id = magicengine.6 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20E"
        trigger = { has_character_flag = duel_move_magic_spell }
        
        # defensive spell dispatcher
        character_event = { id = magicengine.7 }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20F"
        trigger = { has_character_flag = duel_move_magic_spell }
 
        # buff spell dispatcher
        character_event = { id = magicengine.8 }
     
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
     option = {
        name = "EVTOPT_DUELENGINE_20G"
        trigger = { has_character_flag = duel_move_magic_spell }
       
        # special spell dispatcher
        character_event = { id = magicengine.9 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 3 MAGIC ACTION
    option = {
        name = "EVTOPT_DUELENGINE_20H"
        trigger = { has_character_flag = duel_move_magic_other }

        # channeling event
        character_event =  { id = magicengine.0 }
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20I"
        trigger = { has_character_flag = duel_move_magic_other }

        # counterspell flag
        set_character_flag = duel_effect_counterspell
        # magic points penalty
        change_variable = { which = "magic_points" value = -2 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }


}
# Round draw
character_event = { 
    id = duelengine.23
    desc = "EVTDESC_DUELENGINE_23"
    is_triggered_only = yes
    picture = "GFX_evt_duel0"
    border = GFX_event_normal_frame_war
    
    # CASE 1 MEELE COMBAT
    option = {
        name = "EVTOPT_DUELENGINE_20A"
        trigger = { has_character_flag = duel_move_combat }

        set_character_flag = duel_effect_defend

        FROMFROM = { character_event = { id = duelengine.4 }}
        # low hp - higher chances to defend
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                NOT = { check_variable = { which = "duel_hp" value = 3 } }
            }
            modifier = {
                factor = 0.5
                check_variable = { which = "duel_hp" value = 5 }
            }
        }
    }
    # attack stance
    option = {
        name = "EVTOPT_DUELENGINE_20B"
        trigger = { has_character_flag = duel_move_combat }
        
        set_character_flag = duel_effect_attack

        FROMFROM = { character_event = { id = duelengine.4 }}
        # high hp - higher chances to attack
        ai_chance = { 
            factor = 2
            modifier = {
                factor = 4
                check_variable = { which = "duel_hp" value = 5 }
            } 
        }
    }
    # normal stance
    option = {
        name = "EVTOPT_DUELENGINE_20C"
        trigger = { has_character_flag = duel_move_combat }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 2 CASTING SPELL
    option = {
        name = "EVTOPT_DUELENGINE_20D"
        trigger = { has_character_flag = duel_move_magic_spell }

        # offensive spell dispatcher
        character_event = { id = magicengine.6 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20E"
        trigger = { has_character_flag = duel_move_magic_spell }
        
        # defensive spell dispatcher
        character_event = { id = magicengine.7 }
       
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20F"
        trigger = { has_character_flag = duel_move_magic_spell }
 
        # buff spell dispatcher
        character_event = { id = magicengine.8 }
     
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
     option = {
        name = "EVTOPT_DUELENGINE_20G"
        trigger = { has_character_flag = duel_move_magic_spell }
       
        # special spell dispatcher
        character_event = { id = magicengine.9 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    # CASE 3 MAGIC ACTION
    option = {
        name = "EVTOPT_DUELENGINE_20H"
        trigger = { has_character_flag = duel_move_magic_other }

        # channeling event
        character_event =  { id = magicengine.0 }
        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }
    option = {
        name = "EVTOPT_DUELENGINE_20I"
        trigger = { has_character_flag = duel_move_magic_other }

        # counterspell flag
        set_character_flag = duel_effect_counterspell
        # magic points penalty
        change_variable = { which = "magic_points" value = -2 }

        FROMFROM = { character_event = { id = duelengine.4 }}
        ai_chance = { factor = 4 }
    }


}
# in case of death
#
##Should all duels be to the death?
##Maybe there should be options to capture
##Or maybe to flee if it's not going well?
#     -Erik
#
# yes i'am working on it now for testing purpose i will use death :D
# it is easy moddable
#
character_event = { 
    id = duelengine.24
    desc = "EVTDESC_DUELENGINE_24"
    is_triggered_only = yes
    picture = "GFX_evt_duel5"
    border = GFX_event_normal_frame_war
    
    option = {
        name = "EVTOPT_DUELENGINE_24A"
        morale = -0.1
        death = { death_reason = death_accident }
        FROMFROM = { character_event = { id = duelengine.25 } }
        # garbage clean
        clr_character_flag = duel_effect_attack
        clr_character_flag = duel_effect_defend
    }
}
# report the death to winner
character_event = { 
    id = duelengine.25
    desc = "EVTDESC_DUELENGINE_25"
    is_triggered_only = yes
    picture = "GFX_evt_duel5"
    border = GFX_event_normal_frame_war
    
    option = {
        name = "EVTOPT_DUELENGINE_25A"
        morale = 0.1
        # garbage clean
        clr_character_flag = duel_effect_attack
        clr_character_flag = duel_effect_defend
    }
}
# report about escape
character_event = { 
    id = duelengine.26
    desc = "EVTDESC_DUELENGINE_26"
    is_triggered_only = yes
    picture = GFX_evt_battle
    border = GFX_event_normal_frame_war
    
    option = {
        name = "EVTOPT_DUELENGINE_26A"
        random_list = { 
            60 = { add_trait = wounded }
            40 = { add_trait = maimed  }
        }
        if = {
            limit = { NOT = { trait = craven } }
            random = {
                chance = 5
                add_trait = craven
                hidden_tooltip = {
                    character_event ={
                        id = 38257 #Notify
                    }
                }
            }
        }    
        morale = -0.1
        FROMFROM = { character_event = { id = duelengine.27 } }
        # garbage clean
        hidden_tooltip = {
            clr_character_flag = duel_effect_attack
            clr_character_flag = duel_effect_defend
            # clean all other duel stats
            character_event = { id = duelengine.9 }
        }
    }
}
# report the escape to winner
character_event = { 
    id = duelengine.27
    desc = "EVTDESC_DUELENGINE_27"
    is_triggered_only = yes
    picture = GFX_evt_battle
    border = GFX_event_normal_frame_war
    
    option = {
        name = "EVTOPT_DUELENGINE_27A"
        morale = 0.1
        # garbage clean
        hidden_tooltip = {
            clr_character_flag = duel_effect_attack
            clr_character_flag = duel_effect_defend
            # clean all other duel stats
            character_event = { id = duelengine.9 }
        }
    }
}




