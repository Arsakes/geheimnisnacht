##############################################
#
# @author Pietrko <p.l.stepnicki@gmail.com>
# @description Spell engine events
# @version 0.1
# @modified_on 0.1.2
# @wip
# @compatibility 2.2.0
#
#
# main spell events    0-19
# magic potential gain 20-30
#
##############################################
namespace = magicengine
#
# MAIN SPELL EVENTS 
#
# Channeling action gives some magic power points not exceding the maximal power
# maximal safe power equal to SW * 2 (willpower times two)
# Channeling and magic points mechanics is used only in dire circumstances
# when casting strategic spells character have access to all sort of 
# magic power containters etc TODO
character_event = {
    id = magicengine.0
    is_triggered_only = yes
    hide_window = yes
 
    # this is channeling  of magic power
    # mp = mp + k4 + (magic_level - 1)
    immediate = {
        # k4 roll
        character_event = { id = dicethrow.11 }
        if = {
            limit = { trait = magic_power_magister }
            change_variable = { which = "magic_points" value = 1 }
        }
        if = {
            limit = { trait = magic_power_lord }
            change_variable = { which = "magic_points" value = 2 }
        }
        if = {
            limit = { trait = magic_power_archmaster }
            change_variable = { which = "magic_points" value = 3 }
        }
        change_variable = { which = "magic_points" which = "k4_roll" }
 
        # clear variable
        set_variable = { which  = "k4_roll" value = 0 }
        # check if magic points don't excede the maximal value
        #
        # set willpower, multiply, add, compare
        character_event = { id = dicethrow.0 }
        multiply_variable = { which = "SW" value = 2 }
        if = {
            limit = { trait = magic_power_magister }
            change_variable = { which = "SW" value = 1 }
        }
        if = {
            limit = { trait = magic_power_lord }
            change_variable = { which = "SW" value = 2 }
        }
        if = {
            limit = { trait = magic_power_archmaster }
            change_variable = { which = "SW" value = 3 }
        }
        # do actual test
        if = {
            # > or =      
            limit = { check_variable = { which = "magic_points" which = "SW" } }
            set_variable = { which = "magic_points" which = "SW" }
        }
        # clear
        set_variable = { which =  "SW" value = 0 }
    }
}
#############################################################################################
#
# SPELLCRAFT CHECK
#
# (learning/3) - magic_cost(1-15) + lvl_mod(6,8,9,10) - k10 > 0
character_event = {
    id = magicengine.1
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        # get intelligence (Int)
        character_event = { id = dicethrow.1 }
        # roll k10
        character_event = { id = dicethrow.10 }
        # calculate
        subtract_variable = { which = "Int" which = "k10_roll" }
        subtract_variable = { which = "Int" which = "magic_spell_cost" }
        subtract_variable = { which = "magic_points" which = "magic_spell_cost" }

        # modifier from experience
        if = {
            limit = { trait = magic_power_adept }
            change_variable = { which = "Int" value = 6 }
        }
        if = {
            limit = { trait = magic_power_magister }
            change_variable = { which = "Int" value = 8 }
        }
        if = {
            limit = { trait = magic_power_lord }
            change_variable = { which = "Int" value = 9 }
        }
        if = {
            limit = { trait = magic_power_archmaster }
            change_variable = { which = "Int" value = 10 }
        }

        # Handle mistcasts and success
        # not successfull check:  out >= 0
        if = { 
            limit = { check_variable = { which =  "Int" value = 0 }} 
            set_character_flag = last_spell_success
        }
        # fail: -3 < out < -1
        if = { 
            limit = { 
                NOT = { check_variable = { which = "Int" value = -1 } }
                check_variable = { which = "lnt" value = -3 }
            }
            # trigger mistcasts
            random_list = {
                50 = { character_event = { id = magicengine.3 }} # minor mistcast
                50 = { character_event = { id = magicengine.2 }} # failure
            }
        }
        # big failure: out < -3
        if = { 
            limit = { NOT = { check_variable = { which = "k10_roll" value = -3 } }}
            random_list = {
                33 = { character_event = { id = magicengine.4 }} # bad mistcast
                34 = { character_event = { id = magicengine.3 }} # minor mistcast
                33 = { character_event = { id = magicengine.2 }} # failure
            }
        }
        # clear all variables
        set_variable = { which = "k10_roll" value = 0 }
        set_variable = { which = "Int" value = 0 }      
        set_variable = { which = "magic_spell_cost" value = 0 }      
    }
}
############################################
#
# MISTCAST & CAST FAILURE EFFECTS EVENTS
#
###########################################

# Spell failure event  (no consequences)
character_event = {
    id = magicengine.2
    desc = "EVTDESC_MAGICENGINE_2"
    is_triggered_only = yes
    picture = "GFX_evt_mistcast"
     
    option = {
        name = OK
    }
}

character_event = {
    id = magicengine.3
    desc = "EVTDESC_MAGICENGINE_3"
    is_triggered_only = yes
    picture = "GFX_evt_mistcast"
    
    immediate = {
        change_variable = { which = "duel_hp" value = -1 }
    }
    option = {
        name = OK
        random_list = { 
            50 = { add_trait = wounded }
            50 = { }
        }
    }
}

character_event = {
    id = magicengine.4
    desc = "EVTDESC_MAGICENGINE_4"
    is_triggered_only = yes
    picture = "GFX_evt_mistcast"
  
    immediate = {
        change_variable = { which = "duel_hp" value = -2 } 
    }
   
    option = {
        name = OK
        random_list = {
            # mutation
            50 = {
                custom_tooltip = { 
                    text = "TOOLTIP_MAGICENGINE_MUTATION"
                }
                hidden_tooltip = { character_event = { id = mutation.1 }}
            }
            25 = {
                add_trait = maimed
            }
            25 = {
                add_trait = wounded
            }
        }
    }
}

# Duel action: Channeling
character_event = {
    id = magicengine.5
    hide_window  = yes
    is_triggered_only = yes
    
    immediate  = {
        # regenerate magic points to the level of SW 
        # check SW
        character_event = { id = "dicethrow.0" } 
        if = {
            limit = { 
                NOT = { check_variable = { which = "magic_points" which = "SW" }}
                OR = { 
                    trait = magic_power_adept
                    trait = magic_power_magister
                    trait = magic_power_lord
                    trait = magic_power_archmaster
                }
            }
            change_variable = { which = "magic_points" value = 1 }
        }
        # clean
        set_variable = { which = "SW" value = 0 }
    }
}

#########################################################
#
# DUEL SPELL DISPATCHERS
#
# Those events are used to cast correct spell
# via generic <cast typ X spell> moves in duel
#
# There is some trickery in it:
# dispachting events are send to ENEMY for proper definiton of
# FORM, ROOT
#
# so:
# 
# FROM = FROMFROM = FROMFROMFROM =  caster of spell
# ROOT = target of spell
#
##########################################################a

# offensive spell
character_event = {
    id = magicengine.6
    hide_window = yes
    is_triggered_only = yes

    immediate = { 
        FROM = {
            # calculating magic cost
            if = { limit = { trait = lore_light } set_variable = {  which = "magic_spell_cost" value = 4 }}
            if = { limit = { trait = lore_ice } set_variable = {  which = "magic_spell_cost" value = 3 }}
            if = { limit = { trait = lore_necromancy } set_variable = {  which = "magic_spell_cost" value = 3 }}

            # TEST of spellcraft
            character_event = { id = magicengine.1 }

            # OUTCOME
            # Light - Burning Gaze
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_light }
                set_variable = { which = "duel_magic_att" value = 6 }
                if = { limit = { random = 50 } ROOT = { set_character_flag = duel_effect_weaken2 } }
            }
            # Ice - Shardstorm
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_ice }
                set_variable = { which = "duel_magic_att" value = 7 }
            }
            # Lore of Necromancy: Drain Life
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_necromancy }
                set_variable = { which = "duel_magic_att" value = 6 }
                change_variable = { which = "duel_hp" value = 1 }
            }


            # CLEANING
            clr_character_flag = last_spell_success
        }
    }
}

# defensive spell
character_event = {
    id = magicengine.7
    hide_window = yes
    is_triggered_only = yes

    immediate = { 
        FROM = {
            # INIT
            if = { limit = { trait = lore_light } set_variable = {  which = "magic_spell_cost" value = 3 }}
            if = { limit = { trait = lore_ice } set_variable = {  which = "magic_spell_cost" value = 3 }}
            if = { limit = { trait = lore_necromancy } set_variable = {  which = "magic_spell_cost" value = 3 }}

            # TEST of spellcraft
            character_event = { id = magicengine.1 }

            # OUTCOME
            # Light Lore: body of light
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_light }
                set_variable = { which = "duel_magic_att" value = 0 }
                set_character_flag  = duel_effect_defence_bonus2
            }
            # Crytal Cloak
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_ice }
                set_character_flag  = duel_effect_defence_bonus1
                ROOT = { set_character_flag  = duel_effect_weaken1 }
            }
            # Lore of Necromancy: Hellish Vigour
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_necromancy }
                change_variable = { which = "duel_hp" value = 1 }
                set_character_flag = duel_effect_defence_bonus1
            }

            # CLEANING
            clr_character_flag = last_spell_success
        }
    }
}

# buff spell
character_event = {
    id = magicengine.8
    hide_window = yes
    is_triggered_only = yes

    immediate = { 
        FROM = {
            # INIT
            if = { limit = { trait = lore_light } set_variable = {  which = "magic_spell_cost" value = 4 } }
            if = { limit = { trait = lore_ice } set_variable = {  which = "magic_spell_cost" value = 2 }}
            if = { limit = { trait = lore_necromancy } set_variable = {  which = "magic_spell_cost" value = 2 }}

            # TEST of spellcraft
            character_event = { id = magicengine.1 }

            # OUTCOME
            # Lore of Light : Heal
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_light }
                set_variable = { which = "duel_magic_att" value = 0 }
                random_list = {
                    33 = { change_variable = { which = "duel_hp" value = 1 } }
                    34 = { change_variable = { which = "duel_hp" value = 2 } }
                    33 = { change_variable = { which = "duel_hp" value = 3 } }
                }
                if = {
                    limit = { check_variable = { which = "duel_hp" which = "duel_max_hp" } }
                    set_variable = { which = "duel_hp" which = "duel_max_hp" }
                }
            }
            # Lore of Ice: Permafrost
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_ice }
                ROOT = { set_character_flag  = duel_effect_noescape } #TODO
            }
            # Lore of Necromancy: Hand of Dust
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_necromancy }
                set_variable = { which = "duel_magic_att" which = "duel_att" }
                if = { limit = { random = 50 } ROOT = { set_character_flag = duel_effect_weaken1 }} 
            }

            # CLEANING
            clr_character_flag = last_spell_success
        }
    }
}

# special lore spell
character_event = {
    id = magicengine.9
    hide_window = yes
    is_triggered_only = yes

    immediate = { 
        FROM = {
            # INIT
            if = { limit = { trait = lore_light } set_variable = { which = "magic_spell_cost" value = 2 } }
            if = { limit = { trait = lore_ice } set_variable = { which = "magic_spell_cost" value = 6 }}
            if = { limit = { trait = lore_necromancy } set_variable = {  which = "magic_spell_cost" value = 4 }}

            # TEST of spellcraft
            character_event = { id = magicengine.1 }

            # OUTCOME
            # Lore of Light: Radiant Weapon
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_light }
                set_variable = { which = "duel_magic_att" value = 0 }
                set_character_flag  = duel_effect_chaos_bane
            }
            # Lore of Ice: Ice Maiden Kiss (dmg+freeze)
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_ice }
                set_variable = { which = "duel_magic_att" value = 8 }
                ROOT = { set_character_flag  = duel_effect_freeze } #TODO implement effects
            }
            # Lore of Necromancy: Siphon Life
            if = {
                limit = { has_character_flag = last_spell_success trait = lore_ice }
                set_variable = { which = "duel_magic_att" value = 6 }
                random_list = { 
                    50 = { change_variable = { which = "duel_hp" value = 1 } }
                    50 = { change_variable = { which = "magic_points" value = 5 }}
                }
            }

            # CLEANING
            clr_character_flag = last_spell_success
        }
    }
}

# Battle spell cancel on_action triggering (after battle)
character_event = {
    id = magicengine.10
    hide_window = yes
    is_triggered_only = yes

    immediate = { disband_event_forces = magical_spells }
}

# Strategic spell cooldown event
character_event = {
    id = magicengine.11
    is_triggered_only = yes
    hide_window = yes

    immediate = { 
        clr_character_flag = strategic_spell_used
    }
}
################################################################
#
# BATTLE SPELL ENGINE
#
# event that spawn troops representing direct damage spell effect
# in regular battles
#
# triggered in each battle on_combat_pulse
#
character_event = {
    id = magicengine.12
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        NOT = { has_earmarked_regiments = magical_spells }
        is_alive = yes
        OR = {
            # large scale spells: not available to adepts
            trait = magic_power_magister
            trait = magic_power_lord
            trait = magic_power_archmaster
        }
        OR = {
            trait = lore_light
            trait = lore_fire
            trait = lore_ice
            trait = lore_dark_magic
            trait = lore_necromancy
        }
    }
    immediate = {
        if = { 
            limit = { trait = magic_power_adept }
            location = {
            ROOT = {
                spawn_unit = {
                province = PREV
                owner = ROOT
                home = PREV
                earmark = magical_spells
                attrition = 1.0
                troops = { magical_spells = { 10 10 } }
                }
           }
           }
        }
        if = { 
            limit = { trait = magic_power_magister }
            location = {
            ROOT = {
                spawn_unit = {
                province = PREV
                owner = ROOT
                home = PREV
                earmark = magical_spells
                attrition = 1.0
                troops = { magical_spells = { 20 20 } }
                }
            }
            }
        }
        if = { 
            limit = { trait = magic_power_lord }
            location = {
            ROOT = {
                spawn_unit = {
                    province = PREV
                    owner = ROOT
                    home = PREV
                    earmark = magical_spells
                    attrition = 1.0
                    troops = { magical_spells = { 30 30 } }
                }
            }
            }
        }
        if = { 
            limit = { trait = magic_power_archmaster }
            location = {
            ROOT = {
                spawn_unit = {
                    province = PREV
                    owner = ROOT
                    home = PREV
                    earmark = magical_spells
                    attrition = 1.0
                    troops = { magical_spells = { 40 40 } }
                }
            }
            }
        }
    }
}
# SPECIAL MAGIC IN-BATTLE EFFECTS DISPATCHER
# 
# triggers events for mages in battle
#
character_event = {
    id = magicengine.13
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        is_alive = yes
        OR = {
            # large scale spells: not available to adepts
            trait = magic_power_magister
            trait = magic_power_lord
            trait = magic_power_archmaster
        }
        OR = {
            trait = lore_light
            trait = lore_fire
            trait = lore_ice
            trait = lore_dark_magic
            trait = lore_necromancy
        }
    }

    weight_multiplier = {
        days = 1
        modifier = {
            factor = 1.5
            trait = brave
        }
        modifier = {
            factor = 0.5
            trait = craven
        }
        modifier = {
            trait = genius
            factor = 1.2
        }
        modifier = {
            trait = quick
            factor = 1.1
        }    
        modifier = {
            trait = slow
            factor = 0.9
        }
        
        modifier = {
            trait = imbecile
            factor = 0.2
        }
        modifier = {
            trait = inbred
            factor = 0.2
        }
        modifier = {
            trait = strong
            factor = 1.5
        }
        modifier = {
            trait = weak
            factor = 0.8
        }    
        modifier = {
            factor = 0.8
            trait = stressed
        }
        modifier = {
            factor = 0.8
            trait = depressed
        }
        modifier = {
            factor = 0.75
            trait = lunatic
        }
        modifier = {
            factor = 0.75
            trait = possessed
        }
        modifier = {
            factor = 0.9
            trait = ill
        }
        modifier = {
            factor = 0.8
            trait = pneumonic
        }
        modifier = {
            factor = 0.8
            trait = syphilitic
        }
        modifier = {
            factor = 0.5
            trait = leper
        }
        modifier = {
            factor = 0.9
            trait = wounded
        }
        modifier = {
            factor = 0.8
            trait = maimed
        }
        modifier = {
            factor = 0.5
            trait = infirm
        }
        modifier = {
            factor = 0.4
            trait = incapable
        }
        modifier = {
            factor = 0.5
            trait = drunkard
        }
        modifier = {
            factor = 0.5
            trait = has_rattlelung
        }
        modifier = {
            factor = 0.5
            trait = has_bone_auge
        }
        modifier = {
            factor = 0.5
            trait = has_nurgles_rot
        }
        modifier = {
            factor = 0.5
            trait = has_creeping_buboes
        }
        modifier = {
            factor = 0.5
            trait = has_green_pox
        }        
        modifier = {
            factor = 0.5
            trait = has_red_pox
        }
        modifier = {
            factor = 0.5
            trait = has_tomb_rot
        }
        modifier = {
            factor = 2
            trait = magic_power_lord
        }
        modifier = {
            factor = 3
            trait = magic_power_archmaster
        }
        #FIXME DEBUG
        #modifier = {
        #    factor = 30
        #}
    }
    ##### DISPATCHING TO CORRECT TARGETS GOES HERE #######
    immediate = {
        # FOR CHARACTERS
        if = { 
            limit = { trait = lore_light } 
            character_event = { id = hysh.5 }
        }
        if = { 
            limit = { trait = lore_ice } 
            character_event = { id = ice.6 }
        }
        if = { 
            limit = { trait = lore_necromancy } 
            #character_event = { id = necromancy.6 }
        }
        if = { 
            limit = { trait = lore_dark_magic } 
            #character_event = { id = necromancy.6 }
        }
        # FOR ENEMIES
        # Ruler cas
        if = {
            limit = { 
                war = yes
                is_ruler = yes
                OR = {
                    is_primary_war_attacker = yes
                    is_primary_war_defender = yes
                    independent = yes
                }
            }
            any_current_enemy = {
                limit = { 
                    at_location = ROOT
                    in_command = yes
                    prisoner = no
                }
                # here should be commands
                if = { limit = { trait = lore_light } character_event = { id = hysh.6 } }
                if = { limit = { trait = lore_ice } character_event = { id = ice.7 } }
            }
            any_current_enemy = {
                any_realm_character = {
                    limit = { 
                        at_location = ROOT
                        in_command = yes
                        prisoner = no
                    } 
                    # here should be commands
                    if = { limit = { trait = lore_light } character_event = { id = hysh.6 } }
                    if = { limit = { trait = lore_ice } character_event = { id = ice.7 } }

                }
            }
        }
        # Ok next case (not a ruler)
        if = {
            limit = { 
                NOT = {
                    war = yes
                    is_ruler = yes
                    OR = {
                        is_primary_war_attacker = yes
                        is_primary_war_defender = yes
                        independent = yes
                    }
                }
            }
            liege = {
                any_current_enemy = {
                    limit = { 
                        at_location = ROOT
                        in_command = yes
                        prisoner = no
                    }
                    # here should be commands
                    if = { limit = { trait = lore_light } character_event = { id = hysh.6 } }
                    if = { limit = { trait = lore_ice } character_event = { id = ice.7 } }
                }
                any_current_enemy = {
                    any_realm_character = {
                        limit = { 
                            at_location = ROOT
                            in_command = yes
                            prisoner = no
                        }    
                        # here should be commands
                       if = { limit = { trait = lore_light } character_event = { id = hysh.6 } }
                       if = { limit = { trait = lore_ice } character_event = { id = ice.7 } }
                    }
                }
            }
        }
        # Ok next case (mercanaries)
        any_independent_ruler = {
            limit = {
                mercenary = yes
                at_location = ROOT
                in_command = yes
                prisoner = no
            }
            # here should be commands
            if = { limit = { trait = lore_light } character_event = { id = hysh.6 } }
            if = { limit = { trait = lore_ice } character_event = { id = ice.7 } }
        }
    }
}
##########################################################
#
# On birth events and gaining magic potential
#
#########################################################
#
# Eeach character magic potenttial is described by two
# signs from the set { 0, A, B } 
# Let name those XY = { 00, 0A, A0, BA, AB, AA, BB, B0, 0B }
#
# Genetic code is writen in value of variable "magic_potential" 
# genetic code: variable value
#
# Two genetic markers
# x_magic_gene = { 0,1,2 } - mother 'magic gene'
# y_magic_gene = { 0,1,2 } - father 'magic gene'
#
# This is main on_birth event
#
# ROOT = child 
character_event = {
    id = magicengine.20
    is_triggered_only = yes
    hide_windw = yes  
    
    immediate = {
        # fire fixing events for ppl without genetic markers
        father = { character_event = { id = magicengine.21 }}
        mother = { character_event = { id = magicengine.21 }}

        # send event that make parents to pass their genes
        father = { character_event = { id = magicengine.22 }}
        mother = { character_event = { id = magicengine.22 }}

        # send event that inform parents about magic power of child
        if = { 
            limit = { 
               father = {
                   trait = magic_power_adept
                   trait = magic_power_magister
                   trait = magic_power_lord
                   trait = magic_power_archmaster
               }
            }
            check_variable = { which = "x_magic_gene" value = 1 }
            check_variable = { which = "y_magic_gene" value = 1 }
            father = { character_event = { id = magicengine.23 days = 3 }}
        }
        # send event that inform parents about magic power of child
        if = { 
            limit = { 
               mother = {
                   trait = magic_power_adept
                   trait = magic_power_magister
                   trait = magic_power_lord
                   trait = magic_power_archmaster
               }
               check_variable = { which = "x_magic_gene" value = 1 }
               check_variable = { which = "y_magic_gene" value = 1 }
            }
            mother = { character_event = { id = magicengine.23 days = 3 }}
        }
    }
}
# Set the gene marker for wizards that have traits but doesn't have magic genes
# THIS IS COMPLETELY RANDOM
character_event = {
    id = magicengine.21
    is_triggered_only = yes
    hide_windw = yes  
    
    immediate = {
        if = {
            limit = { 
                OR = {
                   trait = magic_power_adept
                   trait = magic_power_magister
                   trait = magic_power_lord
                   trait = magic_power_archmaster
                }
                is_variable_equal = { which = "x_magic_gene" value = 0 }
                is_variable_equal = { which = "y_magic_gene" value = 0 }
            }
            random_list = {
                50 = { set_variable = { which = "x_magic_gene" value = 1 }}
                50 = { set_variable = { which = "x_magic_gene" value = 2 }}
            }
            random_list = {
                50 = { set_variable = { which = "y_magic_gene" value = 1 }}
                50 = { set_variable = { which = "y_magic_gene" value = 2 }}
            }
        }
    }
}
# passing genes
character_event = {
    id = magicengine.22
    is_triggered_only = yes
    hide_windw = yes 

    # x_magic_gene - female
    # y_magic_gene - male
    immediate = {
       # PASS GENE FOR FEMALES (SAVES GENE TO x_magic_gene OF CHILD)
       if = {
           limit = { is_female = yes } 
           # chose one of two version of gene and save it as  X to child
           random_list = {
               50 = {
                   if = {  
                       limit = { is_variable_equal = { which = "x_magic_gene" value = 0 }}
                       FROM = { set_variable = { which = "x_magic_gene" value = 0 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "x_magic_gene" value = 1 }}
                       FROM = { set_variable = { which = "x_magic_gene" value = 1 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "x_magic_gene" value = 2 }}
                       FROM = { set_variable = { which = "x_magic_gene" value = 2 }}
                   }
               }
               # save as y
               50 = {
                   if = {  
                       limit = { is_variable_equal = { which = "y_magic_gene" value = 0 }}
                       FROM = { set_variable = { which = "x_magic_gene" value = 0 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "y_magic_gene" value = 1 }}
                       FROM = { set_variable = { which = "x_magic_gene" value = 1 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "y_magic_gene" value = 2 }}
                       FROM = { set_variable = { which = "x_magic_gene" value = 2 }}
                   }
               }
           }
           # Mutation
           random_list = {
               97 = {}
               1 = { FROM = { set_variable = { which = "x_magic_gene" value = 0 }}}
               1 = { FROM = { set_variable = { which = "x_magic_gene" value = 1 }}}
               1 = { FROM = { set_variable = { which = "x_magic_gene" value = 2 }}}
           }

       }
       # PASS GENE FOR MALES (SAVES GENE TO y_magic_gene OF CHILD)
       if = {
           limit = { is_female = no } 
           # chose one of two version of gene and save it as  Y to child
           random_list = {
               50 = {
                   if = {  
                       limit = { is_variable_equal = { which = "x_magic_gene" value = 0 }}
                       FROM = { set_variable = { which = "y_magic_gene" value = 0 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "x_magic_gene" value = 1 }}
                       FROM = { set_variable = { which = "y_magic_gene" value = 1 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "x_magic_gene" value = 2 }}
                       FROM = { set_variable = { which = "y_magic_gene" value = 2 }}
                   }
               }
               # save as y
               50 = {
                   if = {  
                       limit = { is_variable_equal = { which = "y_magic_gene" value = 0 }}
                       FROM = { set_variable = { which = "y_magic_gene" value = 0 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "y_magic_gene" value = 1 }}
                       FROM = { set_variable = { which = "y_magic_gene" value = 1 }}
                   }
                   if = {  
                       limit = { is_variable_equal = { which = "y_magic_gene" value = 2 }}
                       FROM = { set_variable = { which = "y_magic_gene" value = 2 }}
                   }
               }
           }
           # Mutation
           random_list = {
               97 = {}
               1 = { FROM = { set_variable = { which = "y_magic_gene" value = 0 }}}
               1 = { FROM = { set_variable = { which = "y_magic_gene" value = 1 }}}
               1 = { FROM = { set_variable = { which = "y_magic_gene" value = 2 }}}
           }
       }
       # Enough of this
       # now we have both x_magic_gene, y_magic_gene for FROM (child)
       # Randomisation
}

# Children shows magic potential (Inform parents)
character_event = {
    id = magicengine.23
    is_triggered_only = yes # triggered from magicengine.20
    desc = "EVTDESC_MAGICENGINE_23"
  
    option = {
        name = OK
    }
}
